logging:
  level:
    root: INFO

# Expose only health probes
management:
  metrics.export.defaults.enabled: false
  info.defaults.enabled: false
  endpoints.enabled-by-default: false
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true

ingestor:
  anonymizePaymentInstrument: ${ANONYMIZE_PAYMENT_INSTRUMENT:true}
  contractIdObfuscationHmacKey: ${CONTRACT_ID_OBFUSCATION_HMAC_KEY:mykeybase64}
  resources:
    base:
      path: src/test/resources
  api:
    baseurl: https://${CSV_INGESTOR_HOST:internal.it}
    wallet:
      baseurl: https://${WALLET_HOST:wallet.it}
      updateContracts: /payment-wallet-migrations/cstar/v1/migrations/wallets/updateDetails
      deleteContracts: /payment-wallet-migrations/cstar/v1/migrations/wallets/delete
      apikey: ${WALLET_API_KEY:myapikey}
  blobclient:
    basepath: storage
    apikey: ${INTERNAL_SERVICES_API_KEY:myapikey}
    sourceContainer: rtd-transactions-decrypted

spring:
  config:
    activate:
      on-profile: default
  data:
    mongodb:
      uri: ${MONGODB_CONNECTION_URI:mongodb://localhost:27017}
      database: ${MONGODB_NAME:rtd}
  cloud:
    function:
      definition: blobStorageConsumer
    stream:
      source: rtdTrxProducer
      defaultBinder: rtd-trx
      bindings:
        blobStorageConsumer-in-0: # name must match [handler name]-in-0
          destination: rtd-platform-events
          group: rtd-ingestor-consumer-group
          content-type: application/json
          binder: blob-storage
        rtdTrxProducer-out-0: # name must match [handler name]-out-0
          destination: rtd-trx
          content-type: application/json
          binder: rtd-trx
      binders:
        rtd-trx:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      auto-create-topics: false
                      brokers: ${KAFKA_BROKER_RTD_TRX://localhost:29095}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_SASL_JAAS_CONFIG_PRODUCER_RTD_TRX}
                          mechanism: PLAIN
                        security:
                          protocol: SASL_SSL
                        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                        default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        blob-storage:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      auto-create-topics: false
                      brokers: ${KAFKA_BROKER_PLATFORM_EVENTS://localhost:29095}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_SASL_JAAS_CONFIG_CONSUMER_BLOB_STORAGE_EVENTS}
                          mechanism: PLAIN
                        security:
                          protocol: SASL_SSL
                      consumerProperties:
                        key:
                          deserializer: org.apache.kafka.common.serialization.StringDeserializer
                        value:
                          deserializer: org.apache.kafka.common.serialization.StringDeserializer
